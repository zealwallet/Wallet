pragma solidity 0.8.21;

import "./Base.t.sol";

contract SignerTest is BaseTest {
    uint256 x = 0x31359b08b8f26196b92b19a6548b99ed6a23917860508aa81af2d1cca6ffdc59;
    uint256 y = 0xa75a3a5ba023a8a9605ebf01d2eb3932e6b3a6341807be3de0bdcbb66ff7cddb;
    bytes32 recoveryId = 0x96ad334021ca7082ddf4cca874cdaa47ca0f255e151d1df40396614122586cdf;

    bytes signature =
        hex"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000024b9f3638e4d8c51efac9f7f56c791bfb29779065a37782a0d3f8603095409f357bfc8ef3a306ff1001693cdc11248f40414f17abcf321e6dec676f8440b2a43d60000000000000000000000000000000000000000000000000000000000000025da65b32028a48ea134b3044ebead8ef7c06c45e960870e8068337930b436a92e1d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a47b2274797065223a22776562617574686e2e676574222c226368616c6c656e6765223a225a4d62684172726276676f30547a78564a5259494a33545f5765554f3643495565355a70686c5367584d45222c226f726967696e223a226368726f6d652d657874656e73696f6e3a2f2f6865616d6e6a626e666c63696b6367676f69706c6962666f6d6d66626b6a706a222c2263726f73734f726967696e223a66616c73657d00000000000000000000000000000000000000000000000000000000";
    string message = "Apple sauce";
    bytes encodedMessage = abi.encode(message);

    function setupSigner(bytes32 _recoveryId, uint256 _x, uint256 _y) public returns (Signer signer) {
        bytes memory data =
            abi.encodeWithSelector(DeploymentRouter(deploymentRouter).setupSafe.selector, _recoveryId, _x, _y);

        address signerAddress = factoryProxyImp.getSignerAddress(_recoveryId, _x, _y);
        address[] memory owners = new address[](1);
        owners[0] = signerAddress;
        bytes memory setup =
            _safeSetup(owners, address(deploymentRouter), data, SAFE_FALLBACK, address(0), 0, payable(address(0)));

        GnosisSafeProxyFactory(SAFE_FACTORY).createProxyWithNonce(
            SAFE_SINGLETON,
            setup, //data,
            uint256(uint160(signerAddress))
        );

        signer = Signer(signerAddress);
    }

    function testSignerIsValid() public {
        Signer signer = setupSigner(recoveryId, x, y);

        assertEq(signer.isValidSignature(encodedMessage, signature), bytes4(0x20c13b0b));
    }

    function testSignerIsInvalidKey(uint256 _y) public {
        vm.assume(_y != y);
        y = _y;

        Signer signer = setupSigner(recoveryId, x, y);
        vm.expectRevert(VALIDATION_ERROR);
        signer.isValidSignature(encodedMessage, signature);
    }

    function testSignerIsInvalidKey() public {
        uint256 x = 0x413918e62467a93ba5bb91dfde3f62c30fcf759e8cf167ee06ff714d14ebe1ce;
        uint256 y = 0x251ce26491ef739e6b2ae0157451195106b3f11c98d53b5400cf29045fed7f29;

        Signer signer = setupSigner(recoveryId, x, y);
        vm.expectRevert(VALIDATION_ERROR);
        signer.isValidSignature(encodedMessage, signature);
    }

    function testSignerIsInvalidSignature() public {
        // "Apple zauce signed"
        bytes memory _signature =
            hex"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000024d775c23c3b1f611f943adda55f52f5902ce2a28f31b0f3a09cb16e55dfe23f7da2d9e825d72082409df9ebfaa0207a3470e948f36ae7ba508198a2b7a27a4f770000000000000000000000000000000000000000000000000000000000000025da65b32028a48ea134b3044ebead8ef7c06c45e960870e8068337930b436a92e1d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001117b2274797065223a22776562617574686e2e676574222c226368616c6c656e6765223a226e584a7a716e4f554c77377330744c434f7146496f496a4267324636707a68723449654f30706a5a38794d222c226f726967696e223a226368726f6d652d657874656e73696f6e3a2f2f6865616d6e6a626e666c63696b6367676f69706c6962666f6d6d66626b6a706a222c2263726f73734f726967696e223a66616c73652c226f746865725f6b6579735f63616e5f62655f61646465645f68657265223a22646f206e6f7420636f6d7061726520636c69656e74446174614a534f4e20616761696e737420612074656d706c6174652e205365652068747470733a2f2f676f6f2e676c2f796162506578227d000000000000000000000000000000";

        Signer signer = setupSigner(recoveryId, x, y);

        vm.expectRevert(INVALID_MESSAGE);
        signer.isValidSignature(encodedMessage, _signature);
    }

    function testSignerIsInvalidMessage() public {
        string memory message = "Apple sauze";
        bytes memory encodedMessage = abi.encode(message);

        Signer signer = setupSigner(recoveryId, x, y);

        vm.expectRevert(INVALID_MESSAGE);
        signer.isValidSignature(encodedMessage, signature);
    }

    function testSignerIsInvalidMessage(bytes calldata _message) public {
        vm.assume(keccak256(_message) != keccak256(encodedMessage));
        encodedMessage = _message;

        Signer signer = setupSigner(recoveryId, x, y);

        vm.expectRevert(INVALID_MESSAGE);
        signer.isValidSignature(encodedMessage, signature);
    }

    function testDifferentDevices() public {
        uint256 x = 0x31359b08b8f26196b92b19a6548b99ed6a23917860508aa81af2d1cca6ffdc59;
        uint256 y = 0xa75a3a5ba023a8a9605ebf01d2eb3932e6b3a6341807be3de0bdcbb66ff7cddb;
        bytes32 recoveryId = 0x96ad334021ca7082ddf4cca874cdaa47ca0f255e151d1df40396614122586cdf;

        bytes memory _signature1 =
            hex"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000024b9f3638e4d8c51efac9f7f56c791bfb29779065a37782a0d3f8603095409f357bfc8ef3a306ff1001693cdc11248f40414f17abcf321e6dec676f8440b2a43d60000000000000000000000000000000000000000000000000000000000000025da65b32028a48ea134b3044ebead8ef7c06c45e960870e8068337930b436a92e1d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a47b2274797065223a22776562617574686e2e676574222c226368616c6c656e6765223a225a4d62684172726276676f30547a78564a5259494a33545f5765554f3643495565355a70686c5367584d45222c226f726967696e223a226368726f6d652d657874656e73696f6e3a2f2f6865616d6e6a626e666c63696b6367676f69706c6962666f6d6d66626b6a706a222c2263726f73734f726967696e223a66616c73657d00000000000000000000000000000000000000000000000000000000";

        bytes memory _signature2 =
            hex"00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000244db6c8d45025474a0e816698c046d133208c1e41e33a872121901d1ef6760b8ff0d286b047d4cce4dcea1471c0630bf187ac7aaa35d22ec15e6c4f3fc34ee1bf0000000000000000000000000000000000000000000000000000000000000025da65b32028a48ea134b3044ebead8ef7c06c45e960870e8068337930b436a92e190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001117b2274797065223a22776562617574686e2e676574222c226368616c6c656e6765223a225a4d62684172726276676f30547a78564a5259494a33545f5765554f3643495565355a70686c5367584d45222c226f726967696e223a226368726f6d652d657874656e73696f6e3a2f2f6865616d6e6a626e666c63696b6367676f69706c6962666f6d6d66626b6a706a222c2263726f73734f726967696e223a66616c73652c226f746865725f6b6579735f63616e5f62655f61646465645f68657265223a22646f206e6f7420636f6d7061726520636c69656e74446174614a534f4e20616761696e737420612074656d706c6174652e205365652068747470733a2f2f676f6f2e676c2f796162506578227d000000000000000000000000000000";

        bytes memory _signature3 =
            hex"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000024edae5414f2201a54cf4763906c30e273737bc6f31de6fe660d61304a92466ad498facf2f805e737a540d9607c3578f586f4d2e46bffcf4f1e31897633e3259580000000000000000000000000000000000000000000000000000000000000025da65b32028a48ea134b3044ebead8ef7c06c45e960870e8068337930b436a92e1d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001117b2274797065223a22776562617574686e2e676574222c226368616c6c656e6765223a225a4d62684172726276676f30547a78564a5259494a33545f5765554f3643495565355a70686c5367584d45222c226f726967696e223a226368726f6d652d657874656e73696f6e3a2f2f6865616d6e6a626e666c63696b6367676f69706c6962666f6d6d66626b6a706a222c2263726f73734f726967696e223a66616c73652c226f746865725f6b6579735f63616e5f62655f61646465645f68657265223a22646f206e6f7420636f6d7061726520636c69656e74446174614a534f4e20616761696e737420612074656d706c6174652e205365652068747470733a2f2f676f6f2e676c2f796162506578227d000000000000000000000000000000";

        Signer signer = setupSigner(recoveryId, x, y);

        assertEq(signer.isValidSignature(encodedMessage, _signature1), bytes4(0x20c13b0b));
        assertEq(signer.isValidSignature(encodedMessage, _signature2), bytes4(0x20c13b0b));
        assertEq(signer.isValidSignature(encodedMessage, _signature3), bytes4(0x20c13b0b));
    }
}
